"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _constants = require("./common/constants");

var _lines = require("./common/lines");

var _filters = require("./common/filters");

var _extractToken = _interopRequireDefault(require("./common/extractToken"));

var _reduceGemDeps = _interopRequireDefault(require("./common/reduceGemDeps"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var _default = function _default() {
  var gemspec = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var endOfHeader = gemspec.indexOf(_constants.gemspecStartToken);
  var header = gemspec.slice(0, endOfHeader);

  var _filteredAndTrimmedLi = (0, _lines.filteredAndTrimmedLines)(gemspec.slice(endOfHeader)),
      _filteredAndTrimmedLi2 = _toArray(_filteredAndTrimmedLi),
      gemspecStart = _filteredAndTrimmedLi2[0],
      lines = _filteredAndTrimmedLi2.slice(1);

  var specName = (0, _extractToken.default)(gemspecStart, {
    start: '|',
    replacer: [/\|/g, '']
  });
  var specLines = lines.filter((0, _filters.startFilter)(specName)).map(function (l) {
    return l.slice(l.indexOf(specName) + "".concat(specName, ".").length);
  });
  var attributes = specLines.filter(_filters.filterGemspecAtrributes).reduce(function (acc, l) {
    var k = (0, _extractToken.default)(l, {
      end: '='
    });
    var v = (0, _extractToken.default)(l, {
      start: '='
    });
    return _objectSpread({}, acc, _defineProperty({}, k, v));
  }, {});
  var dependencies = (0, _reduceGemDeps.default)(specLines.filter(_filters.filterGemspecDeps).map(function (l) {
    return (0, _extractToken.default)(l, {
      start: _constants.addDepToken
    });
  }));
  var devDependencies = (0, _reduceGemDeps.default)(specLines.filter(_filters.filterGemspecDevDeps).map(function (l) {
    return (0, _extractToken.default)(l, {
      start: _constants.addDevDepToken
    });
  }));
  return {
    header: header,
    attributes: attributes,
    dependencies: dependencies,
    devDependencies: devDependencies
  };
};

exports.default = _default;
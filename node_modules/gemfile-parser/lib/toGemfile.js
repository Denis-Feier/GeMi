"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _constants = require("./common/constants");

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var gemfileDepsToStr = function gemfileDepsToStr() {
  var dependencies = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _options$inGroupBlock = options.inGroupBlock,
      inGroupBlock = _options$inGroupBlock === void 0 ? false : _options$inGroupBlock;
  var leadingPad = inGroupBlock ? '  ' : '';
  return Object.values(dependencies).map(function (d) {
    return "".concat(leadingPad, "gem ").concat(d);
  }).join(_constants.EOL);
};

var groupBlockEntryToStr = function groupBlockEntryToStr(group) {
  return "group ".concat(group, " do");
};

var _default = function _default(_ref) {
  var header = _ref.header,
      defaultGroup = _ref.defaultGroup,
      otherGroups = _ref.otherGroups;
  var defaultGroupDependencies = gemfileDepsToStr(defaultGroup);
  var otherGroupHeaders = Object.keys(otherGroups).map(groupBlockEntryToStr);
  var otherGroupDependencies = Object.keys(otherGroups).reduce(function (acc, group) {
    return _toConsumableArray(acc).concat([gemfileDepsToStr(otherGroups[group], {
      inGroupBlock: true
    })]);
  }, []);
  var otherGroupSections = otherGroupHeaders.map(function (h, i) {
    return "".concat(h, "\n").concat(otherGroupDependencies[i], "\nend\n");
  }).join(_constants.EOL);
  return "".concat(header).concat(defaultGroupDependencies, "\n\n").concat(otherGroupSections, "\n");
};

exports.default = _default;